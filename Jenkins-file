pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/dpham2123/8.2CDevSecOps.git'
      }
    }

    stage('Install Dependencies') {
      steps {
        bat 'npm ci || npm install'
      }
    }

    stage('Run Tests') {
      steps {
        // Option A (your current behavior: always succeed)
        // bat 'npm test || exit /b 0'

        // Option B (continue but reflect failures as UNSTABLE so post can react)
        script {
          def code = bat(returnStatus: true, script: 'npm test')
          if (code != 0) { currentBuild.result = 'UNSTABLE' }
        }
      }
      post {
        success {
          mail to: 'pduy14266@gmail.com',
               subject: "Test ✔ Build #${env.BUILD_NUMBER}",
               body: "Job: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}\nStage: ${env.STAGE_NAME}\nStatus: SUCCESS"
        }
        unsuccessful { // covers FAILURE and UNSTABLE
          mail to: 'pduy14266@gmail.com',
               subject: "Test ✖ Build #${env.BUILD_NUMBER}",
               body: "Job: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}\nStage: ${env.STAGE_NAME}\nStatus: ${currentBuild.currentResult}"
        }
      }
    }

    stage('Generate Coverage Report') {
      steps {
        bat 'npm run coverage || exit /b 0'
      }
    }

    stage('NPM Audit (Security Scan)') {
      steps {
        // Same pattern as tests if you want UNSTABLE on findings:
        // script {
        //   def code = bat(returnStatus: true, script: 'npm audit')
        //   if (code != 0) { currentBuild.result = 'UNSTABLE' }
        // }
        bat 'npm audit || exit /b 0'
      }
      post {
        success {
          mail to: 'pduy14266@gmail.com',
               subject: "Security Scan ✔ Build #${env.BUILD_NUMBER}",
               body: "Job: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}\nStage: ${env.STAGE_NAME}\nStatus: SUCCESS"
        }
        unsuccessful {
          mail to: 'pduy14266@gmail.com',
               subject: "Security Scan ✖ Build #${env.BUILD_NUMBER}",
               body: "Job: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}\nStage: ${env.STAGE_NAME}\nStatus: ${currentBuild.currentResult}"
        }
      }
    }

    stage('Complete') {
      steps {
        echo "Completed..."
      }
    }
  }

  // Pipeline-level notifications (runs after all stages)
  post {
    success {
      mail to: 'pduy14266@gmail.com',
           subject: "Pipeline ✔ Build #${env.BUILD_NUMBER}",
           body: "Job: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}\nStatus: SUCCESS"
    }
    failure {
      mail to: 'pduy14266@gmail.com',
           subject: "Pipeline ✖ Build #${env.BUILD_NUMBER}",
           body: "Job: ${env.JOB_NAME}\nBuild: ${env.BUILD_URL}\nStatus: FAILURE"
    }
  }
}







