pipeline {
    agent any
    
    environment {
        RECIPIENTS = "pduy14266@gmail.com"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/dpham2123/8.2CDevSecOps.git'
            }
        }
        
        stage('Install Dependencies') {
            steps { 
                bat 'npm ci || npm install' 
            }
        }
        
        stage('Run Tests') {
            steps { 
                script {
                    def testResult = bat(script: 'npm test', returnStatus: true)
                    if (testResult == 0) {
                        currentBuild.result = 'SUCCESS'
                        env.TEST_STATUS = 'SUCCESS'
                    } else {
                        currentBuild.result = 'UNSTABLE'
                        env.TEST_STATUS = 'FAILURE'
                    }
                }
            }
            post {
                always {
                    script {
                        def subject = "Test Stage ${env.TEST_STATUS}: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}"
                        def body = """
Test Stage completed with status: ${env.TEST_STATUS}

Job: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Build URL: ${env.BUILD_URL}

Please check the logs for more details.
"""
                        
                        emailext(
                            to: "${RECIPIENTS}",
                            subject: subject,
                            body: body,
                            attachLog: true
                        )
                    }
                }
            }
        }
        
        stage('Generate Coverage Report') {
            steps {
                // Ensure coverage report exists
                bat 'npm run coverage || exit /b 0'
            }
        }
        
        stage('NPM Audit (Security Scan)') {
            steps { 
                script {
                    def auditResult = bat(script: 'npm audit', returnStatus: true)
                    if (auditResult == 0) {
                        env.SECURITY_STATUS = 'SUCCESS'
                    } else {
                        env.SECURITY_STATUS = 'FAILURE'
                    }
                }
            }
            post {
                always {
                    script {
                        def subject = "Security Scan Stage ${env.SECURITY_STATUS}: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}"
                        def body = """
Security Scan Stage completed with status: ${env.SECURITY_STATUS}

Job: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Build URL: ${env.BUILD_URL}

This scan shows known CVEs in the dependencies.
Please check the logs for detailed vulnerability information.
"""
                        
                        emailext(
                            to: "${RECIPIENTS}",
                            subject: subject,
                            body: body,
                            attachLog: true
                        )
                    }
                }
            }
        }
    }
}


